// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/DanielTitkov/crud-api-service-sample/internal/repository/entgo/ent/pizza"
	"github.com/DanielTitkov/crud-api-service-sample/internal/repository/entgo/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePizza = "Pizza"
)

// PizzaMutation represents an operation that mutates the Pizza nodes in the graph.
type PizzaMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	title         *string
	description   *string
	price         *int64
	addprice      *int64
	dough         *pizza.Dough
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Pizza, error)
	predicates    []predicate.Pizza
}

var _ ent.Mutation = (*PizzaMutation)(nil)

// pizzaOption allows management of the mutation configuration using functional options.
type pizzaOption func(*PizzaMutation)

// newPizzaMutation creates new mutation for the Pizza entity.
func newPizzaMutation(c config, op Op, opts ...pizzaOption) *PizzaMutation {
	m := &PizzaMutation{
		config:        c,
		op:            op,
		typ:           TypePizza,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPizzaID sets the ID field of the mutation.
func withPizzaID(id int) pizzaOption {
	return func(m *PizzaMutation) {
		var (
			err   error
			once  sync.Once
			value *Pizza
		)
		m.oldValue = func(ctx context.Context) (*Pizza, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pizza.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPizza sets the old Pizza of the mutation.
func withPizza(node *Pizza) pizzaOption {
	return func(m *PizzaMutation) {
		m.oldValue = func(context.Context) (*Pizza, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PizzaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PizzaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PizzaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *PizzaMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PizzaMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PizzaMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PizzaMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PizzaMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PizzaMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *PizzaMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PizzaMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PizzaMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *PizzaMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PizzaMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PizzaMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[pizza.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PizzaMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[pizza.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PizzaMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, pizza.FieldDescription)
}

// SetPrice sets the "price" field.
func (m *PizzaMutation) SetPrice(i int64) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *PizzaMutation) Price() (r int64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldPrice(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *PizzaMutation) AddPrice(i int64) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *PizzaMutation) AddedPrice() (r int64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *PizzaMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetDough sets the "dough" field.
func (m *PizzaMutation) SetDough(pi pizza.Dough) {
	m.dough = &pi
}

// Dough returns the value of the "dough" field in the mutation.
func (m *PizzaMutation) Dough() (r pizza.Dough, exists bool) {
	v := m.dough
	if v == nil {
		return
	}
	return *v, true
}

// OldDough returns the old "dough" field's value of the Pizza entity.
// If the Pizza object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PizzaMutation) OldDough(ctx context.Context) (v pizza.Dough, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDough is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDough requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDough: %w", err)
	}
	return oldValue.Dough, nil
}

// ResetDough resets all changes to the "dough" field.
func (m *PizzaMutation) ResetDough() {
	m.dough = nil
}

// Where appends a list predicates to the PizzaMutation builder.
func (m *PizzaMutation) Where(ps ...predicate.Pizza) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PizzaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Pizza).
func (m *PizzaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PizzaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, pizza.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, pizza.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, pizza.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, pizza.FieldDescription)
	}
	if m.price != nil {
		fields = append(fields, pizza.FieldPrice)
	}
	if m.dough != nil {
		fields = append(fields, pizza.FieldDough)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PizzaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pizza.FieldCreateTime:
		return m.CreateTime()
	case pizza.FieldUpdateTime:
		return m.UpdateTime()
	case pizza.FieldTitle:
		return m.Title()
	case pizza.FieldDescription:
		return m.Description()
	case pizza.FieldPrice:
		return m.Price()
	case pizza.FieldDough:
		return m.Dough()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PizzaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pizza.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case pizza.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case pizza.FieldTitle:
		return m.OldTitle(ctx)
	case pizza.FieldDescription:
		return m.OldDescription(ctx)
	case pizza.FieldPrice:
		return m.OldPrice(ctx)
	case pizza.FieldDough:
		return m.OldDough(ctx)
	}
	return nil, fmt.Errorf("unknown Pizza field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PizzaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pizza.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case pizza.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case pizza.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case pizza.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case pizza.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case pizza.FieldDough:
		v, ok := value.(pizza.Dough)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDough(v)
		return nil
	}
	return fmt.Errorf("unknown Pizza field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PizzaMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, pizza.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PizzaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pizza.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PizzaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pizza.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Pizza numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PizzaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pizza.FieldDescription) {
		fields = append(fields, pizza.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PizzaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PizzaMutation) ClearField(name string) error {
	switch name {
	case pizza.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Pizza nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PizzaMutation) ResetField(name string) error {
	switch name {
	case pizza.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case pizza.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case pizza.FieldTitle:
		m.ResetTitle()
		return nil
	case pizza.FieldDescription:
		m.ResetDescription()
		return nil
	case pizza.FieldPrice:
		m.ResetPrice()
		return nil
	case pizza.FieldDough:
		m.ResetDough()
		return nil
	}
	return fmt.Errorf("unknown Pizza field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PizzaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PizzaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PizzaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PizzaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PizzaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PizzaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PizzaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Pizza unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PizzaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Pizza edge %s", name)
}
