// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/crud-api-service-sample/internal/repository/entgo/ent/pizza"
)

// Pizza is the model entity for the Pizza schema.
type Pizza struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price int64 `json:"price,omitempty"`
	// Dough holds the value of the "dough" field.
	Dough pizza.Dough `json:"dough,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pizza) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pizza.FieldID, pizza.FieldPrice:
			values[i] = new(sql.NullInt64)
		case pizza.FieldTitle, pizza.FieldDescription, pizza.FieldDough:
			values[i] = new(sql.NullString)
		case pizza.FieldCreateTime, pizza.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pizza", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pizza fields.
func (pi *Pizza) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pizza.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case pizza.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pi.CreateTime = value.Time
			}
		case pizza.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pi.UpdateTime = value.Time
			}
		case pizza.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pi.Title = value.String
			}
		case pizza.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = value.String
			}
		case pizza.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pi.Price = value.Int64
			}
		case pizza.FieldDough:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dough", values[i])
			} else if value.Valid {
				pi.Dough = pizza.Dough(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pizza.
// Note that you need to call Pizza.Unwrap() before calling this method if this Pizza
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pizza) Update() *PizzaUpdateOne {
	return (&PizzaClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Pizza entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Pizza) Unwrap() *Pizza {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pizza is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pizza) String() string {
	var builder strings.Builder
	builder.WriteString("Pizza(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(pi.Title)
	builder.WriteString(", description=")
	builder.WriteString(pi.Description)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pi.Price))
	builder.WriteString(", dough=")
	builder.WriteString(fmt.Sprintf("%v", pi.Dough))
	builder.WriteByte(')')
	return builder.String()
}

// Pizzas is a parsable slice of Pizza.
type Pizzas []*Pizza

func (pi Pizzas) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
